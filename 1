Only in ../opt-se-cslam/: 1
Only in ../trunk2/: cime
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/namelist_defaults_cam.xml ../trunk2/components/cam/bld/namelist_files/namelist_defaults_cam.xml
174c174
< <ncdata dyn="se" hgrid="ne0np4CONUS.ne30x8" nlev="32">/glade/p/cgd/amp/pel/inic/conus-1year-spinup-F2000climo.i.nc</ncdata>
---
> <ncdata dyn="se" hgrid="ne0np4CONUS.ne30x8" nlev="32">atm/cam/inic/se/f_asd2017.cam6_clm5_ne0conus30x8_t12_1980-01-01-00000.nc</ncdata>
188c188
< <bnd_topo hgrid="1.9x2.5"   >atm/cam/topo/fv_1.9x2.5_nc3000_Nsw084_Nrs016_Co120_Fi001_ZR_061116.nc</bnd_topo>
---
> <bnd_topo hgrid="1.9x2.5"   >atm/cam/topo/fv_1.9x2.5_nc3000_Nsw084_Nrs016_Co120_Fi001_ZR_GRNL_c190405.nc</bnd_topo>
219c219
< <bnd_topo hgrid="ne0np4CONUS.ne30x8" aquaplanet="0" >/glade/p/cgd/amp/pel/topo/conus_30_x8_nc3000_Co060_Fi001_MulG_PF_nullRR_Nsw042.C60-repaired.nc</bnd_topo>
---
> <bnd_topo hgrid="ne0np4CONUS.ne30x8" aquaplanet="0" >atm/cam/topo/conus_30_x8_nc3000_Co060_Fi001_MulG_PF_CONUS_Nsw042_20170417.nc</bnd_topo>
221d220
< /glade/p/cgd/amp/pel/topo/conus_30_x8_nc3000_Co060_Fi001_MulG_PF_nullRR_Nsw042.C60-repaired.nc
826a826
> <!-- 2-DEG VRT -->
827a828,874
> <h2o_ch4ox_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/H2OemissionCH4oxidationx2_3D_L70_1849-2015_CMIP6ensAvg_1.9x2.5_c190308.nc</h2o_ch4ox_ext_file>
> <num_a1_an_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_so4_a1_anthro-ene_vertical_1750-2015_1.9x2.5_c20170616.nc</num_a1_an_ext_file>
> <num_a1_cv_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_a1_so4_contvolcano_vertical_850-5000_1.9x2.5_c20190417.nc</num_a1_cv_ext_file>
> <num_a2_cv_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_a2_so4_contvolcano_vertical_850-5000_1.9x2.5_c20190417.nc</num_a2_cv_ext_file>
> <so2_cv_ext_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SO2_contvolcano_vertical_850-5000_1.9x2.5_c20190417.nc</so2_cv_ext_file>
> <so4_a1_an_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_so4_a1_anthro-ene_vertical_1750-2015_1.9x2.5_c20170616.nc</so4_a1_an_ext_file>
> <so4_a1_cv_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_so4_a1_contvolcano_vertical_850-5000_1.9x2.5_c20190417.nc</so4_a1_cv_ext_file>
> <so4_a2_cv_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_so4_a2_contvolcano_vertical_850-5000_1.9x2.5_c20190417.nc</so4_a2_cv_ext_file>
> <so2_ar_ext_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SO2_aircraft_vertical_1750-2015_1.9x2.5_c20170608.nc</so2_ar_ext_file>
> <bc_a4_ar_ext_file  hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_bc_a4_aircraft_vertical_1750-2015_1.9x2.5_c20170608.nc</bc_a4_ar_ext_file>
> <no2_ar_ext_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_NO2_aircraft_vertical_1750-2015_1.9x2.5_c20170608.nc</no2_ar_ext_file>
> <num_a4_ar_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_bc_a4_aircraft_vertical_1750-2015_1.9x2.5_c20170608.nc</num_a4_ar_ext_file>
> <so2_volc_pi_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/stratvolc/VolcanEESMv3.10_piControl_SO2_1850-2014average_2deg_ZeroTrop_c190701.nc</so2_volc_pi_ext_file>
> 
> <!-- 2-DEG SRF -->
> 
> <bc_a4_an_srf_file  hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_bc_a4_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</bc_a4_an_srf_file>
> <bc_a4_bb_srf_file  hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_bc_a4_bb_surface_1750-2015_1.9x2.5_c20170322.nc</bc_a4_bb_srf_file>
> <dms_ot_srf_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_DMS_other_surface_1750-2015_1.9x2.5_c20170322.nc</dms_ot_srf_file>
> <dms_bb_srf_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_DMS_bb_surface_1750-2015_1.9x2.5_c20170322.nc</dms_bb_srf_file>
> <num_a1_bb_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_so4_a1_bb_surface_1750-2015_1.9x2.5_c20170322.nc</num_a1_bb_srf_file>
> <num_a1_sh_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_so4_a1_anthro-ag-ship_surface_1750-2015_1.9x2.5_c20170616.nc</num_a1_sh_srf_file>
> <num_a2_an_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_so4_a2_anthro-res_surface_1750-2015_1.9x2.5_c20170616.nc</num_a2_an_srf_file>
> <num_a4_oc_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_pom_a4_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</num_a4_oc_srf_file>
> <num_a4_bc_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_bc_a4_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</num_a4_bc_srf_file>
> <num_a4_bb_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_bc_a4_bb_surface_1750-2015_1.9x2.5_c20170322.nc</num_a4_bb_srf_file>
> <num_pom_bb_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_num_pom_a4_bb_surface_1750-2015_1.9x2.5_c20170322.nc</num_pom_bb_srf_file>
> 
> <so2_ag_sh_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SO2_anthro-ag-ship-res_surface_1750-2015_1.9x2.5_c20170616.nc</so2_ag_sh_file>
> <so2_an_srf_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SO2_anthro-ene_surface_1750-2015_1.9x2.5_c20170616.nc</so2_an_srf_file>
> <so2_bb_srf_file    hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SO2_bb_surface_1750-2015_1.9x2.5_c20170322.nc</so2_bb_srf_file>
> <so4_a1_an_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_so4_a1_anthro-ag-ship_surface_1750-2015_1.9x2.5_c20170616.nc</so4_a1_an_srf_file>
> <so4_a1_bb_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_so4_a1_bb_surface_1750-2015_1.9x2.5_c20170322.nc</so4_a1_bb_srf_file>
> <so4_a2_an_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_so4_a2_anthro-res_surface_1750-2015_1.9x2.5_c20170616.nc</so4_a2_an_srf_file>
> <soag_an_srf_file   hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SOAGx1.5_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</soag_an_srf_file>
> <soag_bg_srf_file   hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SOAGx1.5_biogenic_surface_1750-2015_1.9x2.5_c20170322.nc</soag_bg_srf_file>
> <soag_bb_srf_file   hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_SOAGx1.5_bb_surface_1750-2015_1.9x2.5_c20170322.nc</soag_bb_srf_file>
> <pom_a4_bb_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_pom_a4_bb_surface_1750-2015_1.9x2.5_c20170322.nc</pom_a4_bb_srf_file>
> <pom_a4_an_srf_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_pom_a4_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</pom_a4_an_srf_file>
> <CH2O_an_srf_file   hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_CH2O_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</CH2O_an_srf_file>
> <CH2O_bb_srf_file   hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_CH2O_bb_surface_1750-2015_1.9x2.5_c20170322.nc</CH2O_bb_srf_file>
> <CO_an_srf_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_CO_anthro_surface_1750-2015_1.9x2.5_c20180504.nc</CO_an_srf_file>
> <CO_bb_srf_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_CO_bb_surface_1750-2015_1.9x2.5_c20170322.nc</CO_bb_srf_file>
> <CO_ot_srf_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_CO_other_surface_1750-2015_1.9x2.5_c20170322.nc</CO_ot_srf_file>
> <NO_an_srf_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_NO_anthro_surface_1750-2015_1.9x2.5_c20170608.nc</NO_an_srf_file>
> <NO_bb_srf_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_NO_bb_surface_1750-2015_1.9x2.5_c20170322.nc</NO_bb_srf_file>
> <NO_ot_srf_file     hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/emissions-cmip6_NO_other_surface_1750-2015_1.9x2.5_c20170322.nc</NO_ot_srf_file>
1231a1279
> <clubb_gamma_coef hgrid="1.9x2.5"                 > 0.280   </clubb_gamma_coef>
1315a1364
> <micro_mg_dcs         microphys="mg2" hgrid="1.9x2.5">                 200.D-6    </micro_mg_dcs>
1438a1488
> <seasalt_emis_scale ver="strat" clubb_sgs="1" hgrid="1.9x2.5">1.10D0</seasalt_emis_scale>
1878c1928
< <se_hypervis_power> 0 </se_hypervis_power>
---
> <se_hypervis_power> 3.322 </se_hypervis_power>
1880c1930
< <se_hypervis_scaling se_refined_mesh="1" hypervis_type="tensor" >3.0D0 </se_hypervis_scaling>
---
> <se_hypervis_scaling se_refined_mesh="1" hypervis_type="tensor" > 3.2 </se_hypervis_scaling>
1884,1885c1934
< <se_hypervis_subcycle  hgrid="ne0np4CONUS.ne30x8" hypervis_type="scalar"> 6 </se_hypervis_subcycle>
< <se_hypervis_subcycle  hgrid="ne0np4CONUS.ne30x8" hypervis_type="tensor"> 8 </se_hypervis_subcycle>
---
> <se_hypervis_subcycle  hgrid="ne0np4CONUS.ne30x8"> 4 </se_hypervis_subcycle>
1888a1938
> <se_hypervis_subcycle_q hgrid="ne0np4CONUS.ne30x8"> 4 </se_hypervis_subcycle_q>
1906c1956
< <se_nsplit hgrid="ne0np4CONUS.ne30x8"> 6 </se_nsplit>
---
> <se_nsplit hgrid="ne0np4CONUS.ne30x8"> 5 </se_nsplit>
1910a1961
> <se_variable_nsplit  phys="held_suarez">.true.</se_variable_nsplit>
1912c1963
< <se_phys_dyn_cp>1</se_phys_dyn_cp>
---
> <se_phys_dyn_cp>0</se_phys_dyn_cp>
1914a1966
> <se_nu se_refined_mesh="1" hypervis_type="tensor" > 8.0e-8 </se_nu>
1917a1970
> <se_nu_div se_refined_mesh="1" hypervis_type="tensor" > 15.8e-8 </se_nu_div>
1920a1974
> <se_nu_p se_refined_mesh="1" hypervis_type="tensor" > 8.0e-8 </se_nu_p>
1921a1976
> <se_nu_p waccm_phys="1" hgrid="ne30np4">6E15</se_nu_p>
1942,1944c1997,1999
< <se_rsplit                                           > 3 </se_rsplit>
< <se_rsplit waccm_phys="1" npg="2"                    > 6 </se_rsplit>
< <se_rsplit waccm_phys="1" npg="3"                    > 6 </se_rsplit>
---
> <se_rsplit >                3 </se_rsplit>
> <se_rsplit waccm_phys="1" npg="2">  6 </se_rsplit>
> <se_rsplit waccm_phys="1" npg="3">  6 </se_rsplit>
2001a2057,2091
> 
> <!-- ================================================================== -->
> <!-- Chemistry Rates Diagnostics                                        -->
> <!-- ================================================================== -->
> <rxn_rate_sums>
>   'O3_Prod = NO_HO2 + CH3O2_NO + HOCH2OO_NO + C2H5O2_NO + CH3CO3_NO + EO2_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + MACRO2_NOa + jhonitr + ',
>             'MCO3_NO + MEKO2_NO + ALKO2_NO + jalknit + .92*ISOPAO2_NO + .92*ISOPBO2_NO + ISOPNO3_NO + XO2_NO + ACBZO2_NO + BENZO2_NO + BZOO_NO + ',
>             'C6H5O2_NO + DICARBO2_NO + MALO2_NO + MDIALO2_NO + PHENO2_NO + TOLO2_NO + XYLENO2_NO + XYLOLO2_NO + NTERPO2_NO + .9*TERP2O2_NO + .8*TERPO2_NO + jterpnit',
>   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + C2H4_O3 + C3H6_O3 + ISOP_O3 + MVK_O3 + MACR_O3 + MTERP_O3 + BCARY_O3',
>   'O3S_Loss = 2.0*O_O3 + O1D_H2O + HO2_O3 + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + ',
>               '2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2 + S_O3 + SO_O3 + ',
>               'C2H4_O3 + C3H6_O3 + ISOP_O3 + MVK_O3 + MACR_O3 + MTERP_O3 + BCARY_O3',
>   'Ox_Prod = 2.0*jo2_a + 2.0*jo2_b + NO_HO2 + CH3O2_NO + HOCH2OO_NO + C2H5O2_NO + CH3CO3_NO + EO2_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + MACRO2_NOa + ',
>             'jhonitr + MCO3_NO + MEKO2_NO + ALKO2_NO + jalknit + .92*ISOPAO2_NO + .92*ISOPBO2_NO + ISOPNO3_NO + XO2_NO + ACBZO2_NO + BENZO2_NO + BZOO_NO + ',
>             'C6H5O2_NO + DICARBO2_NO + MALO2_NO + MDIALO2_NO + PHENO2_NO + TOLO2_NO + XYLENO2_NO + XYLOLO2_NO + NTERPO2_NO + .9*TERP2O2_NO + .8*TERPO2_NO + jterpnit',
>   'Ox_Loss = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + ',
>             '2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2 + C2H4_O3 + C3H6_O3 + ISOP_O3 + MVK_O3 + MACR_O3 + MTERP_O3 + BCARY_O3',
>   'RO2_NO_sum = NO_HO2 + HOCH2OO_NO + C2H5O2_NO + CH3CO3_NO + EO2_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + MACRO2_NOa + jhonitr + ',
>                'MCO3_NO + MEKO2_NO + ALKO2_NO + jalknit + .92*ISOPAO2_NO + .92*ISOPBO2_NO + ISOPNO3_NO + XO2_NO + ACBZO2_NO + BENZO2_NO + BZOO_NO + ',
>                'C6H5O2_NO + DICARBO2_NO + MALO2_NO + MDIALO2_NO + PHENO2_NO + TOLO2_NO + XYLENO2_NO + XYLOLO2_NO + NTERPO2_NO + .9*TERP2O2_NO + .8*TERPO2_NO + jterpnit',
>   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
>   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
>                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
>                 'TERP2O2_HO2 + NTERPO2_HO2',
>   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
>                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
>   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
>   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
>   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
>   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
>   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
>   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
>                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
>   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
> </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/1850_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/1850_cam6.xml
4a5,6
>   <ncdata hgrid="1.9x2.5" nlev="32">cesm2_init/b.e20.B1850.f19_g17.release_cesm2_1_0.020/0301-01-01/b.e20.B1850.f19_g17.release_cesm2_1_0.020.cam.i.0301-01-01-00000.nc</ncdata>
> 
31a34,35
> <h2o_ch4ox_ext_file hgrid="1.9x2.5" ver="cam6">atm/cam/chem/emis/CMIP6_emissions_1750_2015_2deg/H2O_emission_CH4_oxidationx2_elev_3DmonthlyL70_1850climoCMIP6piControl001_y21-50avg_1.9x2.5_c190308.nc</h2o_ch4ox_ext_file>
> 
47,56c51
< <ext_frc_specifier>
<   'H2O    ->  $INPUTDATA_ROOT/atm/cam/chem/emis/elev/H2O_emission_CH4_oxidationx2_elev_3DmonthlyL70_1850climoCMIP6piControl001_y21-50avg_c180802.nc',
<   'num_a1 ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_num_so4_a1_anthro-ene_vertical_1750-2015_0.9x1.25_c20170616.nc',
<   'num_a1 ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_num_a1_so4_contvolcano_vertical_850-5000_0.9x1.25_c20170724.nc',
<   'num_a2 ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_num_a2_so4_contvolcano_vertical_850-5000_0.9x1.25_c20170724.nc',
<   'SO2    ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_SO2_contvolcano_vertical_850-5000_0.9x1.25_c20170724.nc',
<   'so4_a1 ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_so4_a1_anthro-ene_vertical_1750-2015_0.9x1.25_c20170616.nc',
<   'so4_a1 ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_so4_a1_contvolcano_vertical_850-5000_0.9x1.25_c20170724.nc',
<   'so4_a2 ->  $INPUTDATA_ROOT/atm/cam/chem/emis/CMIP6_emissions_1750_2015/emissions-cmip6_so4_a2_contvolcano_vertical_850-5000_0.9x1.25_c20170724.nc'
< </ext_frc_specifier>
---
> <h2o_ch4ox_ext_file>atm/cam/chem/emis/elev/H2O_emission_CH4_oxidationx2_elev_3DmonthlyL70_1850climoCMIP6piControl001_y21-50avg_c180802.nc</h2o_ch4ox_ext_file>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/2000_trop_strat_vbs_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/2000_trop_strat_vbs_cam6.xml
217c217
<          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
---
>          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'Ox_Prod', 'Ox_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
249,274d248
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/2010_trop_strat_vbs_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/2010_trop_strat_vbs_cam6.xml
217c217
<          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
---
>          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'Ox_Prod', 'Ox_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
249,274d248
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/hist_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/hist_cam6.xml
3a4,5
>   <ncdata hgrid="1.9x2.5" nlev="32">cesm2_init/b.e20.B1850.f19_g17.release_cesm2_1_0.020/0301-01-01/b.e20.B1850.f19_g17.release_cesm2_1_0.020.cam.i.0301-01-01-00000.nc</ncdata>
> 
30c32
<   <!-- sim_year used for CLM datasets and SSTs forcings -->
---
>   <!-- sim_year used for CO2 cycle namelist settings -->
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/hist_trop_strat_vbs_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/hist_trop_strat_vbs_cam6.xml
115c115
<          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
---
>          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'Ox_Prod', 'Ox_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
147,172d146
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/hist_trop_strat_vbsext_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/hist_trop_strat_vbsext_cam6.xml
114c114
<          'OddOx_Ox_Loss', 'OddOx_HOx_Loss', 'OddOx_NOx_Loss', 'OddOx_CLOxBROx_Loss',
---
>          'OddOx_Ox_Loss', 'OddOx_HOx_Loss', 'OddOx_NOx_Loss', 'OddOx_CLOxBROx_Loss','Ox_Prod', 'Ox_Loss', 
191,216d190
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/hist_trop_strat_vbsfire_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/hist_trop_strat_vbsfire_cam6.xml
125c125
<          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
---
>          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'Ox_Prod', 'Ox_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
157,182d156
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/sd_trop_strat_vbs_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/sd_trop_strat_vbs_cam6.xml
129c129
<          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
---
>          'SOAG0_CHMP', 'SOAG1_CHMP', 'SOAG2_CHMP', 'SOAG3_CHMP', 'SOAG4_CHMP', 'O3_Prod', 'O3_Loss', 'Ox_Prod', 'Ox_Loss', 'OddOx_Ox_Loss', 'OddOx_HOx_Loss',
161,186d160
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/sd_waccm_tsmlt_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/sd_waccm_tsmlt_cam6.xml
119c119
<    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
---
>    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'Ox_Prod', 'Ox_Loss', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
181,206d180
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',      
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
Only in ../trunk2/components/cam/bld/namelist_files/use_cases: sd_waccmx_ma_cam6.xml
Only in ../opt-se-cslam/components/cam/bld/namelist_files/use_cases: use_cases
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_ma_1850_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_ma_1850_cam6.xml
11,12c11
< <ncdata dyn="fv"  hgrid="1.9x2.5" >atm/waccm/ic/b.e20.BW1850.f19_g17.alpha07b.002.cam.i.1851-01-01-00000_c170911.nc</ncdata>
< <ncdata dyn="fv"  hgrid="4x5"     >atm/waccm/ic/b1850.waccm-mam3_4x5_L70.cam2.i.0156-01-01.c141201.nc</ncdata>
---
> <ncdata dyn="fv"  hgrid="1.9x2.5" >cesm2_init/b.e20.BWma1850.f19_g17.release_cesm2_1_0.020/0289-01-01/b.e20.BWma1850.f19_g17.release_cesm2_1_0.020.cam.i.0289-01-01-00000.nc</ncdata>
44c43
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
55a55,56
> 
> <ndep_list>'noy', 'nhx'</ndep_list>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_ma_2000_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_ma_2000_cam6.xml
39c39
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_ma_hist_cam4.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_ma_hist_cam4.xml
8a9,10
> <bnd_topo hgrid="1.9x2.5">atm/cam/topo/USGS-gtopo30_1.9x2.5_remap_c050602.nc</bnd_topo>
> 
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_ma_hist_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_ma_hist_cam6.xml
20,21c20
< <ncdata dyn="fv"  hgrid="1.9x2.5" >atm/waccm/ic/f.e15.FWmaAMIP.f19_f19.misc08_cam5_4_81.003.cam.i.1980-01-01-00000_c160928.nc</ncdata>
< <ncdata dyn="fv"  hgrid="4x5"     >atm/waccm/ic/f2000.waccm-mam3_4x5_L70.cam2.i.0017-01-01.c121113.nc</ncdata>
---
> <ncdata dyn="fv"  hgrid="1.9x2.5" >cesm2_init/b.e20.BWma1850.f19_g17.release_cesm2_1_0.020/0289-01-01/b.e20.BWma1850.f19_g17.release_cesm2_1_0.020.cam.i.0289-01-01-00000.nc</ncdata>
40c39
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
48a48,49
> 
> <ndep_list>'noy', 'nhx'</ndep_list>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_sc_1850_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_sc_1850_cam6.xml
29c29
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_sc_2000_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_sc_2000_cam6.xml
27c27
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_sc_2010_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_sc_2010_cam6.xml
27c27
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_sc_hist_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_sc_hist_cam6.xml
26c26
< <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c091230.nc</qbo_forcing_file>
---
> <qbo_forcing_file>atm/waccm/qbo/qbocoefficients_c151023.nc</qbo_forcing_file>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_1850_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_1850_cam6.xml
117c117
<    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
---
>    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'Ox_Prod', 'Ox_Loss', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
180,205d179
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',      
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_2000_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_2000_cam6.xml
215c215
<    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
---
>    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'Ox_Prod', 'Ox_Loss', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
277,302d276
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_2010_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_2010_cam6.xml
215c215
<    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
---
>    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'Ox_Prod', 'Ox_Loss', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
277,302d276
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',      
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
diff -r ../opt-se-cslam/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_hist_cam6.xml ../trunk2/components/cam/bld/namelist_files/use_cases/waccm_tsmlt_hist_cam6.xml
110c110
<    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
---
>    'OddOx_HOx_Loss', 'OddOx_Loss_Tot', 'OddOx_NOx_Loss', 'OddOx_Ox_Loss', 'OddOx_Prod_Tot', 'Ox_Prod', 'Ox_Loss', 'OH', 'OMEGA', 'OMEGAT', 'ONITR', 'Op', 
172,197d171
< 
< <rxn_rate_sums>
<   'O3_Prod = NO_HO2 + CH3O2_NO + PO2_NO + CH3CO3_NO + C2H5O2_NO + .92*ISOPAO2_NO + .92*ISOPBO2_NO + MACRO2_NOa + MCO3_NO + C3H7O2_NO + RO2_NO + XO2_NO + .9*TOLO2_NO +',
<           '.9*PHENO2_NO + .9*C6H5O2_NO + .9*BENZO2_NO + .9*MALO2_NO + .9*BZOO_NO + .9*ACBZO2_NO + .9*DICARBO2_NO + .9*MDIALO2_NO  + .9*XYLOLO2_NO + .9*XYLENO2_NO + TERPO2_NO +',
<           'TERP2O2_NO + NTERPO2_NO + ALKO2_NO + ENEO2_NO +  EO2_NO + MEKO2_NO + HOCH2OO_NO + jonitr',
<   'O3_Loss = O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3',
<   'O3S_Loss= O1D_H2O + OH_O3 + HO2_O3 + H_O3 + C3H6_O3 + .9*ISOP_O3 + C2H4_O3 + .8*MVK_O3 + 0.8*MACR_O3 + MTERP_O3 + BCARY_O3 +  2.0*O_O3 + 2.0*NO2_O + ',
<             '2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',      
<   'RO2_NO_sum  = NO_HO2 + CH3O2_NO + HOCH2OO_NO + EO2_NO + C2H5O2_NO + CH3CO3_NO + C3H7O2_NO + PO2_NO + RO2_NO + ENEO2_NO + ENEO2_NOb + MEKO2_NO + MACRO2_NOa + MACRO2_NOb +',
<               'MCO3_NO + ISOPAO2_NO + ISOPBO2_NO + ALKO2_NO + ALKO2_NOb + XO2_NO + TOLO2_NO + PHENO2_NO + C6H5O2_NO + BENZO2_NO + MALO2_NO + BZOO_NO + ACBZO2_NO + DICARBO2_NO +',
<               'MDIALO2_NO + XYLOLO2_NO + XYLENO2_NO + TERPO2_NO + TERP2O2_NO + NTERPO2_NO',
<   'RO2_NO3_sum = NO3_HO2 + MACRO2_NO3 + MCO3_NO3 + ISOPAO2_NO3 + ISOPBO2_NO3 + XO2_NO3',
<   'RO2_HO2_sum = CH3O2_HO2 + HOCH2OO_HO2 + EO2_HO2 + C2H5O2_HO2 + CH3CO3_HO2 + C3H7O2_HO2 + PO2_HO2 + RO2_HO2 + MEKO2_HO2 + MACRO2_HO2 + ISOPAO2_HO2 + ISOPBO2_HO2 + ALKO2_HO2 +',
<                 'XO2_HO2 + TOLO2_HO2 + PHENO2_HO2 + C6H5O2_HO2 + BENZO2_HO2 + MALO2_HO2 + BZOO_HO2 + ACBZO2_HO2 + DICARBO2_HO2 + MDIALO2_HO2 + XYLOLO2_HO2 + XYLENO2_HO2 + TERPO2_HO2 +',
<                 'TERP2O2_HO2 + NTERPO2_HO2',
<   'RO2_RO2_sum = CH3O2_CH3O2a + CH3O2_CH3O2b + C2H5O2_CH3O2 + C2H5O2_C2H5O2 + CH3CO3_CH3O2 + CH3CO3_CH3CO3 + C3H7O2_CH3O2 + RO2_CH3O2 + MACRO2_CH3O2 + MACRO2_CH3CO3 + MCO3_CH3O2 +',
<                ' MCO3_CH3CO3 + MCO3_MCO3 + ISOPAO2_CH3O2 + ISOPBO2_CH3O2 + ISOPAO2_CH3CO3 + ISOPBO2_CH3CO3 + XO2_CH3O2 + XO2_CH3CO3',
<   'RCO2_NO2_sum = CH3CO3_NO2 + MCO3_NO2',
<   'OddOx_Ox_Loss  = 2.0*O_O3 + O1D_H2O',
<   'OddOx_HOx_Loss = HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3',
<   'OddOx_NOx_Loss = 2.0*NO2_O + 2.0*jno3_b',
<   'OddOx_CLOxBROx_Loss = 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb + 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Loss_Tot = 2.0*O_O3 + O1D_H2O + HO2_O + HO2_O3 + OH_O + OH_O3 + H_O3 + 2.0*NO2_O + 2.0*jno3_b + 2.0*CLO_O + 2.0*jcl2o2 + 2.0*CLO_CLOa + 2.0*CLO_CLOb + 2.0*BRO_CLOb +',
<                   ' 2.0*BRO_CLOc + 2.0*BRO_BRO + 2.0*BRO_O + CLO_HO2 + BRO_HO2',
<   'OddOx_Prod_Tot = 2.0*jo2_a + 2.0*jo2_b'
< </rxn_rate_sums>
Only in ../trunk2/components/cam/bld/namelist_files/use_cases: waccmx_ma_2000_cam6.xml
Only in ../trunk2/components/cam/bld/namelist_files/use_cases: waccmx_ma_hist_cam6.xml
Only in ../trunk2/components/cam/chem_proc: bin
Only in ../trunk2/components/cam/chem_proc: output
Only in ../trunk2/components/cam/chem_proc/src: OBJ
Only in ../trunk2/components/cam/chem_proc/.svn: tmp
Only in ../trunk2/components/cam/chem_proc: tmp
diff -r ../opt-se-cslam/components/cam/src/dynamics/se/dp_coupling.F90 ../trunk2/components/cam/src/dynamics/se/dp_coupling.F90
928,947c928,970
<    if (lcp_moist.and.phys_dyn_cp==1) then
<      factor = 1.0_r8
<      sum_cp    = cpair
<      sum_water = 1.0_r8                    
<      do nq=1,qsize_condensate_loading
<        m = qsize_condensate_loading_idx(nq)
<        sum_cp  = sum_cp+qsize_condensate_loading_cp(nq)*phys_state%q(icol,ilyr,m)
<        sum_water = sum_water + phys_state%q(icol,ilyr,m)
<      end do
<      !
<      ! scale temperature tendency so that thermal energy increment from physics
<      ! matches SE (not taking into account dme adjust)
<      !
<      ! note that if lcp_moist=.false. then there is thermal energy increment
<      ! consistency (not taking into account dme adjust) 
<      !
<      !
<      factor = cpair*sum_water/sum_cp
<      phys_tend%dtdt(icol,ilyr) = phys_tend%dtdt(icol,ilyr)*factor
<    end if 
---
>    if (lcp_moist) then
> 
>       if (phys_dyn_cp>0) then
>          factor = 1.0_r8
>          sum_cp    = cpair
>          sum_water = 1.0_r8                    
>          do nq=1,qsize_condensate_loading
>             m = qsize_condensate_loading_idx(nq)
>             sum_cp  = sum_cp+qsize_condensate_loading_cp(nq)*phys_state%q(icol,ilyr,m)
>             sum_water = sum_water + phys_state%q(icol,ilyr,m)
>          end do
> 
>          ! scale temperature tendency so that thermal energy increment from physics
>          ! matches SE (not taking into account dme adjust)
> 
>          if (phys_dyn_cp==1) factor = cpair*sum_water/sum_cp
> 
>          ! scale temperature tendency so that thermal energy increment from physics
>          ! matches SE incl. dme adjust (that incl. condensate effect)
> 
>          if (phys_dyn_cp==2) factor = cpair*(1.0_r8+q_prev)/sum_cp
>          phys_tend%dtdt(icol,ilyr) = phys_tend%dtdt(icol,ilyr)*factor
>       else
>          if (phys_dyn_cp==2) then
> 
>             ! thermal energy between physics and dynamics are the same - only condensate effect
> 
>             sum_water = 1.0_r8                    
>             do nq=1,qsize_condensate_loading
>                m = qsize_condensate_loading_idx(nq)
>                sum_water = sum_water + phys_state%q(icol,ilyr,m)
>             end do
> 
>             ! dme_adjust
> 
>             factor = (1.0_r8+q_prev)/sum_water
>             phys_tend%dtdt(icol,ilyr) = phys_tend%dtdt(icol,ilyr)*factor
>          end if
> 
>       end if  ! phys_dyn_cp
> 
>    end if ! lcp_moist
> 
diff -r ../opt-se-cslam/components/cam/src/dynamics/se/dycore/global_norms_mod.F90 ../trunk2/components/cam/src/dynamics/se/dycore/global_norms_mod.F90
19a20
>   public :: test_global_integral
187a189,316
>   ! ================================
>   ! test_global_integral:
>   !
>   ! test that the global integral of
>   ! the area of the sphere is 1.
>   !
>   ! ================================
> 
>   subroutine test_global_integral(elem,hybrid,nets,nete,mindxout)
>     use hybrid_mod,     only: hybrid_t
>     use element_mod,    only: element_t
>     use dimensions_mod, only: np,ne, nelem, nelemd
>     use mesh_mod,       only: MeshUseMeshFile
>     use reduction_mod,  only: ParallelMin,ParallelMax
>     use physconst,      only: pi, ra, rearth
>     use parallel_mod,   only: global_shared_buf, global_shared_sum
> 
>     type(element_t), intent(inout)         :: elem(:)
>     integer,         intent(in)            :: nets,nete
>     type(hybrid_t),  intent(in)            :: hybrid
> 
>     real(kind=r8),   intent(out), optional :: mindxout
> 
>     ! Local variables
>     real(kind=r8) :: I_sphere
>     real(kind=r8) :: h(np,np,nets:nete)
>     ! Element statisics
>     real(kind=r8) :: min_area,max_area,avg_area, max_ratio
>     real(kind=r8) :: min_min_dx, max_min_dx, avg_min_dx
>     real(kind=r8) :: min_normDinv, max_normDinv
>     real(kind=r8) :: min_len
>     integer       :: ie
> 
> 
>     h(:,:,nets:nete)=1.0_r8
> 
>     ! Calculate surface area by integrating 1.0_r8 over sphere and dividing by 4*PI
>     ! (Should be 1)
>     I_sphere = global_integral(elem, h(:,:,nets:nete),hybrid,np,nets,nete)
> 
>     min_area=1d99
>     max_area=0
>     avg_area=0_r8
> 
>     max_ratio = 0
> 
>     min_normDinv=1d99
>     max_normDinv=0
> 
>     min_min_dx=1d99
>     max_min_dx=0
>     avg_min_dx=0_r8
> 
>     do ie=nets,nete
> 
>        elem(ie)%area = sum(elem(ie)%spheremp(:,:))
>        min_area=min(min_area,elem(ie)%area)
>        max_area=max(max_area,elem(ie)%area)
> 
>        min_normDinv = min(min_normDinv,elem(ie)%normDinv)
>        max_normDinv = max(max_normDinv,elem(ie)%normDinv)
> 
>        max_ratio   = max(max_ratio,elem(ie)%dx_long/elem(ie)%dx_short)
> 
> 
>        min_min_dx = min(min_min_dx,elem(ie)%dx_short)
>        max_min_dx = max(max_min_dx,elem(ie)%dx_short)
> 
> 
>        global_shared_buf(ie,1) = elem(ie)%area
>        global_shared_buf(ie,2) = elem(ie)%dx_short
> 
>     enddo
> 
>     min_area=ParallelMin(min_area,hybrid)
>     max_area=ParallelMax(max_area,hybrid)
> 
>     min_normDinv=ParallelMin(min_normDinv,hybrid)
>     max_normDinv=ParallelMax(max_normDinv,hybrid)
> 
>     max_ratio=ParallelMax(max_ratio,hybrid)
> 
>     min_min_dx=ParallelMin(min_min_dx,hybrid)
>     max_min_dx=ParallelMax(max_min_dx,hybrid)
> 
>     call wrap_repro_sum(nvars=2, comm=hybrid%par%comm)
> 
>     avg_area = global_shared_sum(1)/dble(nelem)
>     avg_min_dx = global_shared_sum(2)/dble(nelem)
> 
>     ! Physical units for area
>     min_area = min_area*rearth*rearth/1000000._r8
>     max_area = max_area*rearth*rearth/1000000._r8
>     avg_area = avg_area*rearth*rearth/1000000._r8
> 
> 
>     ! for an equation du/dt = i c u, leapfrog is stable for |c u dt| < 1
>     ! Consider a gravity wave at the equator, c=340m/s
>     ! u = exp(i kmax x/ a ) with x = longitude,  and kmax =  pi a / dx,
>     ! u = exp(i pi x / dx ),   so du/dt = c du/dx becomes du/dt = i c pi/dx u
>     ! stable for dt < dx/(c*pi)
>     ! CAM 26 level AMIP simulation: max gravity wave speed 341.75 m/s
>     if (hybrid%masterthread) then
>        write(iulog,* )""
>        write(iulog,* )"Running Global Integral Diagnostic..."
>        write(iulog,*)"Area of unit sphere is",I_sphere
>        write(iulog,*)"Should be 1.0 to round off..."
>        write(iulog,'(a,f9.3)') 'Element area:  max/min',(max_area/min_area)
>        if (.not.MeshUseMeshFile) then
>            write(iulog,'(a,f6.3,f8.2)') "Average equatorial node spacing (deg, km) = ", &
>                 dble(90)/dble(ne*(np-1)), PI*rearth/(2000.0_r8*dble(ne*(np-1)))
>        end if
>        write(iulog,'(a,2f9.3)') 'norm of Dinv (min, max): ', min_normDinv, max_normDinv
>        write(iulog,'(a,1f8.2)') 'Max Dinv-based element distortion: ', max_ratio
>        write(iulog,'(a,3f8.2)') 'dx based on Dinv svd:          ave,min,max = ', avg_min_dx, min_min_dx, max_min_dx
>        write(iulog,'(a,3f8.2)') "dx based on sqrt element area: ave,min,max = ", &
>                 sqrt(avg_area)/(np-1),sqrt(min_area)/(np-1),sqrt(max_area)/(np-1)
>     end if
> 
>     if(present(mindxout)) then
>         ! min_len now based on norm(Dinv)
>         min_len = 0.002_r8*rearth/(dble(np-1)*max_normDinv)
>         mindxout=1000_r8*min_len
>     end if
> 
>   end subroutine test_global_integral
> 
> 
223,225d351
<     use mesh_mod,       only: MeshUseMeshFile
<     use control_mod,    only: nu, nu_div, nu_p, nu_q, nu_s
<     use dimensions_mod, only: ksponge_end
238,241c364,365
<     real (kind=r8) :: max_min_dx,min_min_dx,min_max_dx,max_unif_dx   ! used for normalizing scalar HV
<     real (kind=r8) :: max_normDinv, min_normDinv  ! used for CFL
<     real (kind=r8) :: min_area, max_area,max_ratio !min/max element area
<     real (kind=r8) :: avg_area, avg_min_dx
---
>     real (kind=r8) :: min_max_dx,max_unif_dx   ! used for normalizing scalar HV
>     real (kind=r8) :: max_normDinv  ! used for CFL
255,259d378
<     real(kind=r8) :: I_sphere
<     real(kind=r8) :: h(np,np,nets:nete)
< 
< 
<     
303,312d421
<     !
<     !******************************************************************************************
<     !
<     ! compute some local and global grid metrics
<     !
<     !******************************************************************************************
<     !
<     h(:,:,nets:nete)=1.0_r8
<     ! Calculate surface area by integrating 1.0_r8 over sphere and dividing by 4*PI (Should be 1)
<     I_sphere = global_integral(elem, h(:,:,nets:nete),hybrid,np,nets,nete)
314,321c423,424
<     min_normDinv = 1E99_r8  
<     max_normDinv = 0
<     min_max_dx   = 1E99_r8
<     min_min_dx   = 1E99_r8
<     max_min_dx   = 0
<     min_area     = 1E99_r8
<     max_area     = 0
<     max_ratio    = 0
---
>     max_normDinv=0
>     min_max_dx=1d99
323,385c426,430
<       max_normDinv  = max(max_normDinv,elem(ie)%normDinv)
<       min_normDinv  = min(min_normDinv,elem(ie)%normDinv)
<       min_min_dx    = min(min_min_dx,elem(ie)%dx_short)
<       max_min_dx    = max(max_min_dx,elem(ie)%dx_short)      
<       min_max_dx    = min(min_max_dx,elem(ie)%dx_long)
<       
<       elem(ie)%area = sum(elem(ie)%spheremp(:,:))
<       min_area      = min(min_area,elem(ie)%area)
<       max_area      = max(max_area,elem(ie)%area)
<       max_ratio     = max(max_ratio,elem(ie)%dx_long/elem(ie)%dx_short)
< 
<       global_shared_buf(ie,1) = elem(ie)%area
<       global_shared_buf(ie,2) = elem(ie)%dx_short      
<     enddo
<     call wrap_repro_sum(nvars=2, comm=hybrid%par%comm)
<     avg_area     = global_shared_sum(1)/dble(nelem)
<     avg_min_dx   = global_shared_sum(2)/dble(nelem)
<     
<     min_area     = ParallelMin(min_area,hybrid)
<     max_area     = ParallelMax(max_area,hybrid)
<     min_normDinv = ParallelMin(min_normDinv,hybrid)    
<     max_normDinv = ParallelMax(max_normDinv,hybrid)
<     min_min_dx   = ParallelMin(min_min_dx,hybrid)    
<     max_min_dx   = ParallelMax(max_min_dx,hybrid)
<     min_max_dx   = ParallelMin(min_max_dx,hybrid)    
<     max_ratio    = ParallelMax(max_ratio,hybrid)
<     ! Physical units for area
<     min_area = min_area*rearth*rearth/1000000._r8
<     max_area = max_area*rearth*rearth/1000000._r8
<     avg_area = avg_area*rearth*rearth/1000000._r8          
<     if (hybrid%masterthread) then
<        write(iulog,* )""
<        write(iulog,* )"Running Global Integral Diagnostic..."
<        write(iulog,*)"Area of unit sphere is",I_sphere
<        write(iulog,*)"Should be 1.0 to round off..."
<        write(iulog,'(a,f9.3)') 'Element area:  max/min',(max_area/min_area)
<        if (.not.MeshUseMeshFile) then
<            write(iulog,'(a,f6.3,f8.2)') "Average equatorial node spacing (deg, km) = ", &
<                 dble(90)/dble(ne*(np-1)), PI*rearth/(2000.0_r8*dble(ne*(np-1)))
<        end if
<        write(iulog,'(a,2f9.3)') 'norm of Dinv (min, max): ', min_normDinv, max_normDinv
<        write(iulog,'(a,1f8.2)') 'Max Dinv-based element distortion: ', max_ratio
<        write(iulog,'(a,3f8.2)') 'dx based on Dinv svd:          ave,min,max = ', avg_min_dx, min_min_dx, max_min_dx
<        write(iulog,'(a,3f8.2)') "dx based on sqrt element area: ave,min,max = ", &
<                 sqrt(avg_area)/(np-1),sqrt(min_area)/(np-1),sqrt(max_area)/(np-1)
<     end if
<     
<       
<     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<     !  SCALAR, RESOLUTION-AWARE HYPERVISCOSITY
<     !  this block of code initializes the variable_hyperviscsoity() array
<     !  based on largest length scale in each element and user specified scaling
<     !  it then limits the coefficient if the user specifed a max CFL
<     !  this limiting is based on the smallest length scale of each element
<     !  since that controls the CFL.
<     !  Mike Levy
<     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<     if (hypervis_power /= 0) then
<       
<       min_hypervis = 1d99
<       max_hypervis = 0
<       avg_hypervis = 0
<       
---
>         max_normDinv = max(max_normDinv,elem(ie)%normDinv)
>         min_max_dx = min(min_max_dx,elem(ie)%dx_long)
>       enddo
>       max_normDinv=ParallelMax(max_normDinv,hybrid)
>       min_max_dx=ParallelMin(min_max_dx,hybrid)
387,394d431
<       max_unif_dx = min_max_dx  ! use this for average resolution, unless:
<       !       viscosity in namelist specified for smallest element:
<       if (fine_ne>0) then
<         ! viscosity in namelist specified for regions with a resolution
<         ! equivilant to a uniform grid with ne=fine_ne
<         if (np /= 4 ) call endrun('ERROR: setting fine_ne only supported with NP=4')
<         max_unif_dx = (111.28_r8*30)/dble(fine_ne)   ! in km
<       endif
396,412c433,447
<       !
<       ! note: if L = eigenvalue of metinv, then associated length scale (km) is
<       ! dx = 1.0_r8/( sqrt(L)*0.5_r8*dble(np-1)*ra*1000.0_r8)
<       !
<       !       for viscosity *tensor*, we take at each point:
<       !            nu1 = nu*(dx1/max_unif_dx)**3.2      dx1 associated with eigenvalue 1
<       !            nu2 = nu*(dx2/max_unif_dx)**3.2      dx2 associated with eigenvalue 2
<       !       with this approach:
<       !          - with this formula, no need to adjust for CFL violations
<       !          - if nu comes from a 3.2 scaling that is stable for coarse and fine resolutions,
<       !            this formulat will be stable.
<       !          - gives the correct answer in long skinny rectangles:
<       !            large viscosity in the long direction, small viscosity in the short direction
<       !
<       normDinv_hypervis = 0
<       do ie=nets,nete
<         ! variable viscosity based on map from ulatlon -> ucontra
---
> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
>       !  SCALAR, RESOLUTION-AWARE HYPERVISCOSITY
>       !  this block of code initializes the variable_hyperviscsoity() array
>       !  based on largest length scale in each element and user specified scaling
>       !  it then limits the coefficient if the user specifed a max CFL
>       !  this limiting is based on the smallest length scale of each element
>       !  since that controls the CFL.
>       !  Mike Levy
> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
>       if (hypervis_power /= 0) then
>         
>         min_hypervis = 1d99
>         max_hypervis = 0
>         avg_hypervis = 0
>         
414,417c449,456
<         ! dx_long
<         elem(ie)%variable_hyperviscosity = sqrt((elem(ie)%dx_long/max_unif_dx) ** hypervis_power)
<         elem(ie)%hv_courant = dtnu*(elem(ie)%variable_hyperviscosity(1,1)**2) * &
<              (lambda_vis**2) * ((ra*elem(ie)%normDinv)**4)
---
>         max_unif_dx = min_max_dx  ! use this for average resolution, unless:
>         !       viscosity in namelist specified for smallest element:
>         if (fine_ne>0) then
>           ! viscosity in namelist specified for regions with a resolution
>           ! equivilant to a uniform grid with ne=fine_ne
>           if (np /= 4 ) call endrun('ERROR: setting fine_ne only supported with NP=4')
>           max_unif_dx = (111.28_r8*30)/dble(fine_ne)   ! in km
>         endif
419,422c458,474
<         ! Check to see if this is stable
<         if (elem(ie)%hv_courant.gt.max_hypervis_courant) then
<           stable_hv = sqrt( max_hypervis_courant / &
<                (  dtnu * (lambda_vis)**2 * (ra*elem(ie)%normDinv)**4 ) )
---
>         !
>         ! note: if L = eigenvalue of metinv, then associated length scale (km) is
>         ! dx = 1.0_r8/( sqrt(L)*0.5_r8*dble(np-1)*ra*1000.0_r8)
>         !
>         !       for viscosity *tensor*, we take at each point:
>         !            nu1 = nu*(dx1/max_unif_dx)**3.2      dx1 associated with eigenvalue 1
>         !            nu2 = nu*(dx2/max_unif_dx)**3.2      dx2 associated with eigenvalue 2
>         !       with this approach:
>         !          - with this formula, no need to adjust for CFL violations
>         !          - if nu comes from a 3.2 scaling that is stable for coarse and fine resolutions,
>         !            this formulat will be stable.
>         !          - gives the correct answer in long skinny rectangles:
>         !            large viscosity in the long direction, small viscosity in the short direction
>         !
>         normDinv_hypervis = 0
>         do ie=nets,nete
>           ! variable viscosity based on map from ulatlon -> ucontra
423a476,485
>           ! dx_long
>           elem(ie)%variable_hyperviscosity = sqrt((elem(ie)%dx_long/max_unif_dx) ** hypervis_power)
>           elem(ie)%hv_courant = dtnu*(elem(ie)%variable_hyperviscosity(1,1)**2) * &
>                (lambda_vis**2) * ((ra*elem(ie)%normDinv)**4)
>           
>           ! Check to see if this is stable
>           if (elem(ie)%hv_courant.gt.max_hypervis_courant) then
>             stable_hv = sqrt( max_hypervis_courant / &
>                  (  dtnu * (lambda_vis)**2 * (ra*elem(ie)%normDinv)**4 ) )
>             
425,430c487,492
<           ! Useful print statements for debugging the adjustments to hypervis
<           print*, "Adjusting hypervis on elem ", elem(ie)%GlobalId
<           print*, "From ", nu*elem(ie)%variable_hyperviscosity(1,1)**2, " to ", nu*stable_hv
<           print*, "Difference = ", nu*(/elem(ie)%variable_hyperviscosity(1,1)**2-stable_hv/)
<           print*, "Factor of ", elem(ie)%variable_hyperviscosity(1,1)**2/stable_hv
<           print*, " "
---
>             ! Useful print statements for debugging the adjustments to hypervis
>             print*, "Adjusting hypervis on elem ", elem(ie)%GlobalId
>             print*, "From ", nu*elem(ie)%variable_hyperviscosity(1,1)**2, " to ", nu*stable_hv
>             print*, "Difference = ", nu*(/elem(ie)%variable_hyperviscosity(1,1)**2-stable_hv/)
>             print*, "Factor of ", elem(ie)%variable_hyperviscosity(1,1)**2/stable_hv
>             print*, " "
432,436c494,503
<           !                make sure that: elem(ie)%hv_courant <=  max_hypervis_courant
<           elem(ie)%variable_hyperviscosity = stable_hv
<           elem(ie)%hv_courant = dtnu*(stable_hv**2) * (lambda_vis)**2 * (ra*elem(ie)%normDinv)**4
<         end if
<         normDinv_hypervis = max(normDinv_hypervis, elem(ie)%hv_courant/dtnu)
---
>             !                make sure that: elem(ie)%hv_courant <=  max_hypervis_courant
>             elem(ie)%variable_hyperviscosity = stable_hv
>             elem(ie)%hv_courant = dtnu*(stable_hv**2) * (lambda_vis)**2 * (ra*elem(ie)%normDinv)**4
>           end if
>           normDinv_hypervis = max(normDinv_hypervis, elem(ie)%hv_courant/dtnu)
>           
>           min_hypervis = min(min_hypervis, elem(ie)%variable_hyperviscosity(1,1))
>           max_hypervis = max(max_hypervis, elem(ie)%variable_hyperviscosity(1,1))
>           global_shared_buf(ie,1) = elem(ie)%variable_hyperviscosity(1,1)
>         end do
438,478c505,516
<         min_hypervis = min(min_hypervis, elem(ie)%variable_hyperviscosity(1,1))
<         max_hypervis = max(max_hypervis, elem(ie)%variable_hyperviscosity(1,1))
<         global_shared_buf(ie,1) = elem(ie)%variable_hyperviscosity(1,1)
<       end do
<       
<       min_hypervis = ParallelMin(min_hypervis, hybrid)
<       max_hypervis = ParallelMax(max_hypervis, hybrid)
<       call wrap_repro_sum(nvars=1, comm=hybrid%par%comm)
<       avg_hypervis = global_shared_sum(1)/dble(nelem)
<       
<       normDinv_hypervis = ParallelMax(normDinv_hypervis, hybrid)
<       
<       ! apply DSS (aka assembly procedure) to variable_hyperviscosity (makes continuous)
<       call initEdgeBuffer(hybrid%par,edgebuf,elem,1)
<       do ie=nets,nete
<         zeta(:,:,ie) = elem(ie)%variable_hyperviscosity(:,:)*elem(ie)%spheremp(:,:)
<         call edgeVpack(edgebuf,zeta(1,1,ie),1,0,ie)
<       end do
<       call bndry_exchange(hybrid,edgebuf,location='print_cfl #1')
<       do ie=nets,nete
<         call edgeVunpack(edgebuf,zeta(1,1,ie),1,0,ie)
<         elem(ie)%variable_hyperviscosity(:,:) = zeta(:,:,ie)*elem(ie)%rspheremp(:,:)
<       end do
<       call FreeEdgeBuffer(edgebuf)
<       
<       ! replace hypervis w/ bilinear based on continuous corner values
<       do ie=nets,nete
<         noreast = elem(ie)%variable_hyperviscosity(np,np)
<         nw = elem(ie)%variable_hyperviscosity(1,np)
<         se = elem(ie)%variable_hyperviscosity(np,1)
<         sw = elem(ie)%variable_hyperviscosity(1,1)
<         do i=1,np
<           x = gp%points(i)
<           do j=1,np
<             y = gp%points(j)
<             elem(ie)%variable_hyperviscosity(i,j) = 0.25_r8*( &
<                  (1.0_r8-x)*(1.0_r8-y)*sw + &
<                  (1.0_r8-x)*(y+1.0_r8)*nw + &
<                  (x+1.0_r8)*(1.0_r8-y)*se + &
<                  (x+1.0_r8)*(y+1.0_r8)*noreast)
<           end do
---
>         min_hypervis = ParallelMin(min_hypervis, hybrid)
>         max_hypervis = ParallelMax(max_hypervis, hybrid)
>         call wrap_repro_sum(nvars=1, comm=hybrid%par%comm)
>         avg_hypervis = global_shared_sum(1)/dble(nelem)
>         
>         normDinv_hypervis = ParallelMax(normDinv_hypervis, hybrid)
>         
>         ! apply DSS (aka assembly procedure) to variable_hyperviscosity (makes continuous)
>         call initEdgeBuffer(hybrid%par,edgebuf,elem,1)
>         do ie=nets,nete
>           zeta(:,:,ie) = elem(ie)%variable_hyperviscosity(:,:)*elem(ie)%spheremp(:,:)
>           call edgeVpack(edgebuf,zeta(1,1,ie),1,0,ie)
480,513c518,540
<       end do
<     else  if (hypervis_scaling/=0) then
<       ! tensorHV.  New eigenvalues are the eigenvalues of the tensor V
<       ! formulas here must match what is in cube_mod.F90
<       ! for tensorHV, we scale out the rearth dependency
<       lambda = max_normDinv**2
<       normDinv_hypervis = (lambda_vis**2) * (max_normDinv**4) * &
<            (lambda**(-hypervis_scaling/2) )
<     else
<       ! constant coefficient formula:
<       normDinv_hypervis = (lambda_vis**2) * (ra*max_normDinv)**4
<     endif
<     
<     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<     !  TENSOR, RESOLUTION-AWARE HYPERVISCOSITY
<     !  The tensorVisc() array is computed in cube_mod.F90
<     !  this block of code will DSS it so the tensor if C0
<     !  and also make it bilinear in each element.
<     !  Oksana Guba
<     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<     if (hypervis_scaling /= 0) then
<       
<       call initEdgeBuffer(hybrid%par,edgebuf,elem,1)
<       do rowind=1,2
<         do colind=1,2
<           do ie=nets,nete
<             zeta(:,:,ie) = elem(ie)%tensorVisc(:,:,rowind,colind)*elem(ie)%spheremp(:,:)
<             call edgeVpack(edgebuf,zeta(1,1,ie),1,0,ie)
<           end do
<           
<           call bndry_exchange(hybrid,edgebuf)
<           do ie=nets,nete
<             call edgeVunpack(edgebuf,zeta(1,1,ie),1,0,ie)
<             elem(ie)%tensorVisc(:,:,rowind,colind) = zeta(:,:,ie)*elem(ie)%rspheremp(:,:)
---
>         call bndry_exchange(hybrid,edgebuf,location='print_cfl #1')
>         do ie=nets,nete
>           call edgeVunpack(edgebuf,zeta(1,1,ie),1,0,ie)
>           elem(ie)%variable_hyperviscosity(:,:) = zeta(:,:,ie)*elem(ie)%rspheremp(:,:)
>         end do
>         call FreeEdgeBuffer(edgebuf)
>         
>         ! replace hypervis w/ bilinear based on continuous corner values
>         do ie=nets,nete
>           noreast = elem(ie)%variable_hyperviscosity(np,np)
>           nw = elem(ie)%variable_hyperviscosity(1,np)
>           se = elem(ie)%variable_hyperviscosity(np,1)
>           sw = elem(ie)%variable_hyperviscosity(1,1)
>           do i=1,np
>             x = gp%points(i)
>             do j=1,np
>               y = gp%points(j)
>               elem(ie)%variable_hyperviscosity(i,j) = 0.25_r8*( &
>                    (1.0_r8-x)*(1.0_r8-y)*sw + &
>                    (1.0_r8-x)*(y+1.0_r8)*nw + &
>                    (x+1.0_r8)*(1.0_r8-y)*se + &
>                    (x+1.0_r8)*(y+1.0_r8)*noreast)
>             end do
515,519c542,553
<         enddo !rowind
<       enddo !colind
<       call FreeEdgeBuffer(edgebuf)
<       
<       !IF BILINEAR MAP OF V NEEDED
---
>         end do
>       else  if (hypervis_scaling/=0) then
>         ! tensorHV.  New eigenvalues are the eigenvalues of the tensor V
>         ! formulas here must match what is in cube_mod.F90
>         ! for tensorHV, we scale out the rearth dependency
>         lambda = max_normDinv**2
>         normDinv_hypervis = (lambda_vis**2) * (max_normDinv**4) * &
>              (lambda**(-hypervis_scaling/2) )
>       else
>         ! constant coefficient formula:
>         normDinv_hypervis = (lambda_vis**2) * (ra*max_normDinv)**4
>       endif
521,537c555,600
<       do rowind=1,2
<         do colind=1,2
<           ! replace hypervis w/ bilinear based on continuous corner values
<           do ie=nets,nete
<             noreast = elem(ie)%tensorVisc(np,np,rowind,colind)
<             nw = elem(ie)%tensorVisc(1,np,rowind,colind)
<             se = elem(ie)%tensorVisc(np,1,rowind,colind)
<             sw = elem(ie)%tensorVisc(1,1,rowind,colind)
<             do i=1,np
<               x = gp%points(i)
<               do j=1,np
<                 y = gp%points(j)
<                 elem(ie)%tensorVisc(i,j,rowind,colind) = 0.25_r8*( &
<                      (1.0_r8-x)*(1.0_r8-y)*sw + &
<                      (1.0_r8-x)*(y+1.0_r8)*nw + &
<                      (x+1.0_r8)*(1.0_r8-y)*se + &
<                      (x+1.0_r8)*(y+1.0_r8)*noreast)
---
>       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
>       !  TENSOR, RESOLUTION-AWARE HYPERVISCOSITY
>       !  The tensorVisc() array is computed in cube_mod.F90
>       !  this block of code will DSS it so the tensor if C0
>       !  and also make it bilinear in each element.
>       !  Oksana Guba
>       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
>       if (hypervis_scaling /= 0) then
>         
>         call initEdgeBuffer(hybrid%par,edgebuf,elem,1)
>         do rowind=1,2
>           do colind=1,2
>             do ie=nets,nete
>               zeta(:,:,ie) = elem(ie)%tensorVisc(:,:,rowind,colind)*elem(ie)%spheremp(:,:)
>               call edgeVpack(edgebuf,zeta(1,1,ie),1,0,ie)
>             end do
>             
>             call bndry_exchange(hybrid,edgebuf)
>             do ie=nets,nete
>               call edgeVunpack(edgebuf,zeta(1,1,ie),1,0,ie)
>               elem(ie)%tensorVisc(:,:,rowind,colind) = zeta(:,:,ie)*elem(ie)%rspheremp(:,:)
>             end do
>           enddo !rowind
>         enddo !colind
>         call FreeEdgeBuffer(edgebuf)
>         
>         !IF BILINEAR MAP OF V NEEDED
>         
>         do rowind=1,2
>           do colind=1,2
>             ! replace hypervis w/ bilinear based on continuous corner values
>             do ie=nets,nete
>               noreast = elem(ie)%tensorVisc(np,np,rowind,colind)
>               nw = elem(ie)%tensorVisc(1,np,rowind,colind)
>               se = elem(ie)%tensorVisc(np,1,rowind,colind)
>               sw = elem(ie)%tensorVisc(1,1,rowind,colind)
>               do i=1,np
>                 x = gp%points(i)
>                 do j=1,np
>                   y = gp%points(j)
>                   elem(ie)%tensorVisc(i,j,rowind,colind) = 0.25_r8*( &
>                        (1.0_r8-x)*(1.0_r8-y)*sw + &
>                        (1.0_r8-x)*(y+1.0_r8)*nw + &
>                        (x+1.0_r8)*(1.0_r8-y)*se + &
>                        (x+1.0_r8)*(y+1.0_r8)*noreast)
>                 end do
540,547c603,611
<           end do
<         enddo !rowind
<       enddo !colind      
<     endif
<     deallocate(gp%points)
<     deallocate(gp%weights)
< 
<     if (ptop>100.0_r8) then
---
>           enddo !rowind
>         enddo !colind
>         
>       endif
>       deallocate(gp%points)
>       deallocate(gp%weights)
>       
>       
>       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
549c613
<       ! CAM setting
---
>       ! time-step information
551,554c615
<      call automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu_p  ,1.0_r8 ,'_p  ')
<      call automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu    ,0.25_r8,'    ')
<      call automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu_div,2.5_r8 ,'_div')
<     else
---
>       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
556c617
<       ! WACCM setting
---
>       ! S=time-step stability region (i.e. advection w/leapfrog: S=1, viscosity w/forward Euler: S=2)
558,595c619,630
<       call automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu_p  ,1.0_r8 ,'_p  ') 
<       call automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu    ,0.5_r8,'    ')
<       call automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu_div,5.0_r8 ,'_div')
<     end if    
<     if (nu_q<0) nu_q = nu_p ! necessary for consistency
<     if (nu_s<0) nu_s = nu   ! temperature damping is always equal to nu
<     
<     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<     !
<     ! time-step information
<     !
<     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<     !
<     ! S=time-step stability region (i.e. advection w/leapfrog: S=1, viscosity w/forward Euler: S=2)
<     !
<     if (tstep_type==1) then
<       S_rk   = 2.0_r8
<       rk_str = '  * RK2-SSP 3 stage (same as tracers)'
<     elseif (tstep_type==2) then         
<       S_rk   = 2.0_r8
<       rk_str = '  * classic RK3'
<     elseif (tstep_type==3) then
<       S_rk   = 2.0_r8
<       rk_str = '  * Kinnmark&Gray RK4'
<     elseif (tstep_type==4) then
<       S_rk   = 3.0_r8
<       rk_str = '  * Kinnmark&Gray RK3 5 stage (3rd order)'
<     end if
<     if (hybrid%masterthread) then        
<       write(iulog,'(a,f12.8,a)') 'Model top is ',ptop,'Pa'
<       write(iulog,'(a)') ' '
<       write(iulog,'(a)') 'Timestepping methods used in dynamical core:'
<       write(iulog,'(a)') 
<       write(iulog,*) rk_str
<       write(iulog,'(a)') '   * Spectral-element advection uses SSP preservation RK3'
<       write(iulog,'(a)') '   * Viscosity operators use forward Euler'
<       if (ntrac>0) then
<         write(iulog,'(a)') '   * CSLAM uses two time-levels backward trajectory method'
---
>       if (tstep_type==1) then
>         S_rk   = 2.0_r8
>         rk_str = '  * RK2-SSP 3 stage (same as tracers)'
>       elseif (tstep_type==2) then         
>         S_rk   = 2.0_r8
>         rk_str = '  * classic RK3'
>       elseif (tstep_type==3) then
>         S_rk   = 2.0_r8
>         rk_str = '  * Kinnmark&Gray RK4'
>       elseif (tstep_type==4) then
>         S_rk   = 3.0_r8
>         rk_str = '  * Kinnmark&Gray RK3 5 stage (3rd order)'
597,614c632,659
<     end if
<     S_laplacian = 2.0_r8 !using forward Euler for sponge diffusion
<     S_hypervis  = 2.0_r8 !using forward Euler for hyperviscosity
<     S_rk_tracer = 2.0_r8
<     !
<     ! estimate max winds
<     !
<     if (ptop>100.0_r8) then
<       umax = 120.0_r8
<     else
<       umax = 600.0_r8
<     end if
<     ugw = 342.0_r8 !max gravity wave speed
<     
<     dt_max_adv             = S_rk/(umax*max_normDinv*lambda_max*ra)
<     dt_max_gw              = S_rk/(ugw*max_normDinv*lambda_max*ra)
<     dt_max_tracer_se       = S_rk_tracer*min_gw/(umax*max_normDinv*ra)
<     if (ntrac>0) then
---
>       if (hybrid%masterthread) then        
>         write(iulog,'(a,f12.8,a)') 'Model top is ',ptop,'Pa'
>         write(iulog,'(a)') ' '
>         write(iulog,'(a)') 'Timestepping methods used in dynamical core:'
>         write(iulog,'(a)') 
>         write(iulog,*) rk_str
>         write(iulog,'(a)') '   * Spectral-element advection uses SSP preservation RK3'
>         write(iulog,'(a)') '   * Viscosity operators use forward Euler'
>         if (ntrac>0) then
>           write(iulog,'(a)') '   * CSLAM uses two time-levels backward trajectory method'
>         end if
>       end if
>       S_laplacian = 2.0_r8 !using forward Euler for sponge diffusion
>       S_hypervis  = 2.0_r8 !using forward Euler for hyperviscosity
>       S_rk_tracer = 2.0_r8
>       !
>       ! estimate max winds
>       !
>       if (ptop>100.0_r8) then
>         umax = 120.0_r8
>       else
>         umax = 600.0_r8
>       end if
>       ugw = 342.0_r8 !max gravity wave speed
>       
>       dt_max_adv             = S_rk/(umax*max_normDinv*lambda_max*ra)
>       dt_max_gw              = S_rk/(ugw*max_normDinv*lambda_max*ra)
>       dt_max_tracer_se       = S_rk_tracer*min_gw/(umax*max_normDinv*ra)
620,660c665,702
<     else
<       dt_max_tracer_fvm = -1.0_r8
<     end if
<     dt_max_hypervis        = s_hypervis/(MAX(nu_div,nu)*normDinv_hypervis)
<     dt_max_hypervis_tracer = s_hypervis/(nu_q*normDinv_hypervis)
<     dt_max_laplacian_top   = 1.0_r8/(nu_top*((ra*max_normDinv)**2)*lambda_vis)
<     
<     max_nu_scale_del4=max(0.9_r8*dt_max_hypervis/dt_dyn_visco_actual,1.0_r8)
<     if (hybrid%masterthread) then        
<       write(iulog,'(a,f10.2,a)') ' '
<       write(iulog,'(a,f10.2,a)') 'Estimates for maximum stable and actual time-steps for different aspects of algorithm:'
<       write(iulog,'(a,f12.8,a)') '(assume max wind is ',umax,'m/s)'
<       write(iulog,'(a)')         '(assume max gravity wave speed is 342m/s)'
<       write(iulog,'(a,f10.2,a)') ' '
<       write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_dyn        (time-stepping dycore  ; u,v,T,dM) < ',&
<            MIN(dt_max_adv,dt_max_gw),'s ',dt_dyn_actual,'s'
<       if (dt_dyn_actual>MIN(dt_max_adv,dt_max_gw)) write(iulog,*) 'WARNING: dt_dyn theoretically unstable'
<       
<       write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_dyn_vis    (hyperviscosity)       ; u,v,T,dM) < ',dt_max_hypervis,&
<            's ',dt_dyn_visco_actual,'s'
<       if (dt_dyn_visco_actual>dt_max_hypervis) write(iulog,*) 'WARNING: dt_dyn_vis theoretically unstable'
<       write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_tracer_se  (time-stepping tracers ; q       ) < ',dt_max_tracer_se,'s ',&
<            dt_tracer_se_actual,'s'
<       if (dt_tracer_se_actual>dt_max_tracer_se) write(iulog,*) 'WARNING: dt_tracer_se theoretically unstable'
<       write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_tracer_vis (hyperviscosity tracers; q       ) < ',dt_max_hypervis,'s',&
<            dt_tracer_visco_actual,'s'
<       if (dt_tracer_visco_actual>dt_max_hypervis) write(iulog,*) 'WARNING: dt_tracer_hypervis theoretically unstable'
<       
<       if (ntrac>0) then
<         write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_tracer_fvm (time-stepping tracers ; q       ) < ',dt_max_tracer_fvm,&
<              's ',dt_tracer_fvm_actual
<         if (dt_tracer_fvm_actual>dt_max_tracer_fvm) write(iulog,*) 'WARNING: dt_tracer_fvm theortically unstable'
<       end if
<       write(iulog,'(a,f10.2)') '* dt_remap (vertical remap dt) ',dt_remap_actual
<       
<       do k=1,nlev
<         if (nu_scale_top(k)>0.15_r8) then
<           if(nu_top>0) then
<             write(iulog,'(a,i2,a,f10.2,a,f10.2,a)') '* dt level',k,'    (del2 sponge           ; u,v,T,dM) < ',&
<                  dt_max_laplacian_top/nu_scale_top(k),'s',dt_dyn_visco_actual,'s'
<             if (dt_dyn_visco_actual>dt_max_laplacian_top/nu_scale_top(k)) &
---
>       dt_max_hypervis        = s_hypervis/(MAX(nu_div,nu)*normDinv_hypervis)
>       dt_max_hypervis_tracer = s_hypervis/(nu_q*normDinv_hypervis)
>       dt_max_laplacian_top   = 1.0_r8/(nu_top*((ra*max_normDinv)**2)*lambda_vis)
> 
>       max_nu_scale_del4=max(0.9_r8*dt_max_hypervis/dt_dyn_visco_actual,1.0_r8)
>       if (hybrid%masterthread) then        
>         write(iulog,'(a,f10.2,a)') ' '
>         write(iulog,'(a,f10.2,a)') 'Estimates for maximum stable and actual time-steps for different aspects of algorithm:'
>         write(iulog,'(a,f12.8,a)') '(assume max wind is ',umax,'m/s)'
>         write(iulog,'(a)')         '(assume max gravity wave speed is 342m/s)'
>         write(iulog,'(a,f10.2,a)') ' '
>         write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_dyn        (time-stepping dycore  ; u,v,T,dM) < ',&
>              MIN(dt_max_adv,dt_max_gw),'s ',dt_dyn_actual,'s'
>         if (dt_dyn_actual>MIN(dt_max_adv,dt_max_gw)) write(iulog,*) 'WARNING: dt_dyn theoretically unstable'
>         
>         write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_dyn_vis    (hyperviscosity)       ; u,v,T,dM) < ',dt_max_hypervis,&
>              's ',dt_dyn_visco_actual,'s'
>         if (dt_dyn_visco_actual>dt_max_hypervis) write(iulog,*) 'WARNING: dt_dyn_vis theoretically unstable'
>         write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_tracer_se  (time-stepping tracers ; q       ) < ',dt_max_tracer_se,'s ',&
>              dt_tracer_se_actual,'s'
>         if (dt_tracer_se_actual>dt_max_tracer_se) write(iulog,*) 'WARNING: dt_tracer_se theoretically unstable'
>         write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_tracer_vis (hyperviscosity tracers; q       ) < ',dt_max_hypervis,'s',&
>              dt_tracer_visco_actual,'s'
>         if (dt_tracer_visco_actual>dt_max_hypervis) write(iulog,*) 'WARNING: dt_tracer_hypervis theoretically unstable'
>         
>         if (ntrac>0) then
>           write(iulog,'(a,f10.2,a,f10.2,a)') '* dt_tracer_fvm (time-stepping tracers ; q       ) < ',dt_max_tracer_fvm,&
>                's ',dt_tracer_fvm_actual
>           if (dt_tracer_fvm_actual>dt_max_tracer_fvm) write(iulog,*) 'WARNING: dt_tracer_fvm theortically unstable'
>         end if
>         write(iulog,'(a,f10.2)') '* dt_remap (vertical remap dt) ',dt_remap_actual
> 
>         do k=1,nlev
>           if (nu_scale_top(k)>0.15_r8) then
>             if(nu_top>0) then
>               write(iulog,'(a,i2,a,f10.2,a,f10.2,a)') '* dt level',k,'    (del2 sponge           ; u,v,T,dM) < ',&
>                    dt_max_laplacian_top/nu_scale_top(k),'s',dt_dyn_visco_actual,'s'
>               if (dt_dyn_visco_actual>dt_max_laplacian_top/nu_scale_top(k)) &
661a704
>             end if
662a706,715
>         end do        
> 
>         write(iulog,*) ' '
>         write(iulog,'(a,f10.2)') 'In sponge del4 viscosity will be increased by a maximum of (max_nu_scale_del4=)', &
>                                  max_nu_scale_del4
>         if (hypervis_power /= 0) then
>           write(iulog,'(a,3e11.4)')'Hyperviscosity (dynamics): ave,min,max = ', &
>                nu*(/avg_hypervis**2,min_hypervis**2,max_hypervis**2/)
>           !         print*, 'fine_ne = ', fine_ne
>           !         print*, 'Using max_unif_dx = ', max_unif_dx
664,675c717
<       end do
<       
<       write(iulog,*) ' '
<       write(iulog,'(a,f10.2,a)') 'In sponge del4 viscosity can be increased by a maximum of (max_nu_scale_del4=)', &
<            max_nu_scale_del4,' and still be stable (theoretically)'
<       write(iulog,'(a,2f10.2)') 'In sponge del4 viscosity is increased by a maximum of ', &
<            MIN(MAXVAL(nu_scale_top(1:ksponge_end)),max_nu_scale_del4)
<       if (hypervis_power /= 0) then
<         write(iulog,'(a,3e11.4)')'Scalar hyperviscosity (dynamics): ave,min,max = ', &
<              nu*(/avg_hypervis**2,min_hypervis**2,max_hypervis**2/)
<         !         print*, 'fine_ne = ', fine_ne
<         !         print*, 'Using max_unif_dx = ', max_unif_dx
---
>         write(iulog,*) 'tstep_type = ',tstep_type
677,680c719,720
<       write(iulog,*) 'tstep_type = ',tstep_type
<     end if
<   end subroutine print_cfl
<   
---
>     end subroutine print_cfl
> 
1059,1060d1098
<     
<   end subroutine wrap_repro_sum
1062,1066c1100
<   subroutine automatically_set_viscosity_coefficients(hybrid,ne,max_min_dx,min_min_dx,nu,factor,str)
<     use physconst,      only: rearth
<     use control_mod,    only: hypervis_scaling,hypervis_power
<     use hybrid_mod,     only: hybrid_t
<     use cam_abortutils, only: endrun
---
>     end subroutine wrap_repro_sum
1068,1122d1101
<     type (hybrid_t), intent(in)    :: hybrid
<     integer        , intent(in)    :: ne
<     real (kind=r8),  intent(in)    :: max_min_dx,min_min_dx,factor
<     real (kind=r8),  intent(inout) :: nu
<     character(len=4), intent(in)   :: str
<     
<     real(r8)      :: uniform_res_hypervis_scaling,nu_fac
<     real(kind=r8) :: nu_min, nu_max
<     !
<     !************************************************************************************************************
<     !
<     ! automatically set viscosity coefficients
<     !
<     !
<     ! Use scaling from
<     !
<     ! - Boville, B. A., 1991: Sensitivity of simulated climate to
<     !   model resolution. J. Climate, 4, 469-485.
<     !
<     ! - TAKAHASHI ET AL., 2006: GLOBAL SIMULATION OF MESOSCALE SPECTRUM 
<     !
<     uniform_res_hypervis_scaling = 3.0_r8    ! 1./log(2.0_r8) = 3.3219
<     !
<     ! compute factor so that at ne30 resolution nu=1E15
<     ! scale so that scaling works for other planets
<     !
<     ! grid spacing in meters = max_min_dx*1000.0_r8
<     !
<     nu_fac = (rearth/6.37122E6_r8)*1.0E15_r8/(110000.0_r8**uniform_res_hypervis_scaling)
< 
<     if (nu < 0) then
<       if (ne <= 0) then
<         if (hypervis_scaling/=0) then        
<           nu_min = factor*nu_fac*(max_min_dx*1000.0_r8)**uniform_res_hypervis_scaling
<           nu_max = factor*nu_fac*(min_min_dx*1000.0_r8)**uniform_res_hypervis_scaling
<           nu     = factor*nu_min        
<           if (hybrid%masterthread) then
<             write(iulog,'(a,a)')             "Automatically setting nu",TRIM(str)
<             write(iulog,'(a,2e9.2,a,2f9.2)') "Value at min/max grid spacing: ",nu_min,nu_max,&
<                  " Max/min grid spacing (km) = ",max_min_dx,min_min_dx
<           end if
<           nu = nu_min*(2.0_r8*rearth/(3.0_r8*max_min_dx*1000.0_r8))**hypervis_scaling/(rearth**4)
<           if (hybrid%masterthread) &
<                write(iulog,'(a,a,a,e9.3)') "Nu_tensor",TRIM(str)," = ",nu
<         else if (hypervis_power/=0) then
<           call endrun('ERROR: Automatic scaling of scalar viscosity not implemented')
<         end if
<       else
<         nu     = factor*nu_fac*((30.0_r8/ne)*110000.0_r8)**uniform_res_hypervis_scaling        
<         if (hybrid%masterthread) then
<           write(iulog,'(a,a,a,e9.2)') "Automatically setting nu",TRIM(str)," =",nu
<         end if
<       end if
<     end if
<   end subroutine automatically_set_viscosity_coefficients
diff -r ../opt-se-cslam/components/cam/src/dynamics/se/dycore/namelist_mod.F90 ../trunk2/components/cam/src/dynamics/se/dycore/namelist_mod.F90
21a22,25
>        nu,                    &
>        nu_s,                  &
>        nu_q,                  &
>        nu_div,                &
156a161,171
>     end if
> 
>     ! some default diffusion coefficiets
>     if (nu_s < 0) then
>       nu_s = nu
>     end if
>     if (nu_q < 0) then
>       nu_q = nu
>     end if
>     if (nu_div < 0) then
>       nu_div = nu
diff -r ../opt-se-cslam/components/cam/src/dynamics/se/dycore/prim_advance_mod.F90 ../trunk2/components/cam/src/dynamics/se/dycore/prim_advance_mod.F90
606c606
<               nu_scale_del4_top=MAX(MIN(nu_scale_top(k),max_nu_scale_del4),1.0_r8)
---
>               nu_scale_del4_top=MIN(1.0_r8+nu_scale_top(k),max_nu_scale_del4)
diff -r ../opt-se-cslam/components/cam/src/dynamics/se/dycore/prim_driver_mod.F90 ../trunk2/components/cam/src/dynamics/se/dycore/prim_driver_mod.F90
39c39
<     use global_norms_mod,       only: print_cfl
---
>     use global_norms_mod,       only: test_global_integral, print_cfl
80a81,85
>     if (topology == "cube") then
>        call test_global_integral(elem, hybrid,nets,nete)
>     end if
> 
> 
145c150
<   subroutine prim_run_subcycle(elem, fvm, hybrid,nets,nete, dt, tl, hvcoord,nsubstep, omega_cn)
---
>   subroutine prim_run_subcycle(elem, fvm, hybrid,nets,nete, dt, tl, hvcoord,nsubstep)
199d203
<     real (kind=r8)    , intent(inout):: omega_cn(2,nets:nete) !min and max of vertical Courant number    
204a209
>     real (kind=r8)  :: omega_cn(2,nets:nete) !min and max of vertical Courant number
228c233
<     if (variable_nsplit.or.compute_diagnostics) then    
---
>     if (nsubstep==1.or.(compute_diagnostics.and..not.variable_nsplit)) then
diff -r ../opt-se-cslam/components/cam/src/dynamics/se/dyn_comp.F90 ../trunk2/components/cam/src/dynamics/se/dyn_comp.F90
301a302,336
>    !
>    ! automatically set viscosity coefficients
>    !
>    !
>    ! Use scaling from
>    !
>    ! - Boville, B. A., 1991: Sensitivity of simulated climate to
>    !   model resolution. J. Climate, 4, 469-485.
>    !
>    ! - TAKAHASHI ET AL., 2006: GLOBAL SIMULATION OF MESOSCALE SPECTRUM 
>    !
>    uniform_res_hypervis_scaling = 3.0_r8    ! 1./log(2.0_r8) = 3.3219
>    !
>    ! compute factor so that at ne30 resolution nu=1E15
>    ! scale so that scaling works for other planets
>    !
>    nu_fac = (rearth/6.37122E6_r8)*1.0E15_r8/(110000.0_r8**uniform_res_hypervis_scaling)
>    if (se_nu_div < 0) then
>       if (se_ne <= 0) then
>          call endrun('dyn_readnl: ERROR must have se_ne > 0 for se_nu_div < 0')
>       end if
>       se_nu_div = 2.25_r8*nu_fac*((30.0_r8/se_ne)*110000.0_r8)**uniform_res_hypervis_scaling
>    end if
>    if (se_nu_p < 0) then
>       if (se_ne <= 0) then
>          call endrun('dyn_readnl: ERROR must have se_ne > 0 for se_nu_p < 0')
>       end if
>       se_nu_p   = 1.0_r8*nu_fac*((30.0_r8/se_ne)*110000.0_r8)**uniform_res_hypervis_scaling
>    end if
>    if (se_nu < 0) then
>       if (se_ne <= 0) then
>          call endrun('dyn_readnl: ERROR must have se_ne > 0 for se_nu < 0')
>       end if
>       se_nu     = 0.225_r8*nu_fac*((30.0_r8/se_ne)*110000.0_r8)**uniform_res_hypervis_scaling
>    end if
422,439c457,467
<       !
<       ! se_nu<0 then coefficients are set automatically in module global_norms_mod
<       !
<       if (se_nu_div>0) &      
<            write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu                       = ',se_nu
<       if (se_nu_div>0) &
<            write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu_div                   = ',se_nu_div
<       if (se_nu_p>0) then
<         write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu_p                     = ',se_nu_p
<         write(iulog, '(a)') 'Note that nu_q must be the same as nu_p for  mass / tracer inconsistency'
<       end if
<       write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu_top                     = ',se_nu_top
<       write(iulog, '(a,i0)')   'dyn_readnl: se_qsplit                     = ',se_qsplit
<       write(iulog, '(a,i0)')   'dyn_readnl: se_rsplit                     = ',se_rsplit
<       write(iulog, '(a,i0)')   'dyn_readnl: se_statefreq                  = ',se_statefreq
<       write(iulog, '(a,i0)')   'dyn_readnl: se_tstep_type                 = ',se_tstep_type
<       write(iulog, '(a,i0)')   'dyn_readnl: se_vert_remap_q_alg           = ',se_vert_remap_q_alg
<       write(iulog, '(a,i0)')   'dyn_readnl: se_qsize_condensate_loading   = ',se_qsize_condensate_loading
---
>       write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu                       = ',se_nu
>       write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu_div                   = ',se_nu_div
>       write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu_p                     = ',se_nu_p
>       write(iulog, '(a)') 'Note that nu_q=nu_p for  mass / tracer inconsistency'
>       write(iulog, '(a,e9.2)') 'dyn_readnl: se_nu_top                   = ',se_nu_top
>       write(iulog, '(a,i0)')   'dyn_readnl: se_qsplit                   = ',se_qsplit
>       write(iulog, '(a,i0)')   'dyn_readnl: se_rsplit                   = ',se_rsplit
>       write(iulog, '(a,i0)')   'dyn_readnl: se_statefreq                = ',se_statefreq
>       write(iulog, '(a,i0)')   'dyn_readnl: se_tstep_type               = ',se_tstep_type
>       write(iulog, '(a,i0)')   'dyn_readnl: se_vert_remap_q_alg         = ',se_vert_remap_q_alg
>       write(iulog, '(a,i0)')   'dyn_readnl: se_qsize_condensate_loading = ',se_qsize_condensate_loading
441,445c469,473
<       write(iulog, '(a,l4)')   'dyn_readnl: lcp_moist                     = ',lcp_moist
<       write(iulog, '(a,i0)')   'dyn_readnl: se_fvm_supercycling           = ',fvm_supercycling
<       write(iulog, '(a,i0)')   'dyn_readnl: se_fvm_supercycling_jet       = ',fvm_supercycling_jet
<       write(iulog, '(a,i0)')   'dyn_readnl: se_kmin_jet                   = ',kmin_jet
<       write(iulog, '(a,i0)')   'dyn_readnl: se_kmax_jet                   = ',kmax_jet      
---
>       write(iulog, '(a,l4)')   'dyn_readnl: lcp_moist                   = ',lcp_moist
>       write(iulog, '(a,i0)')   'dyn_readnl: se_fvm_supercycling         = ',fvm_supercycling
>       write(iulog, '(a,i0)')   'dyn_readnl: se_fvm_supercycling_jet     = ',fvm_supercycling_jet
>       write(iulog, '(a,i0)')   'dyn_readnl: se_kmin_jet                 = ',kmin_jet
>       write(iulog, '(a,i0)')   'dyn_readnl: se_kmax_jet                 = ',kmax_jet      
449,456c477,486
<          if (hypervis_power /= 0) then
<            write(iulog, '(a)') 'Using scalar viscosity (Zarzycki et al 2014 JClim)'
<            write(iulog, '(a,e11.4)') 'dyn_readnl: se_hypervis_power = ',se_hypervis_power, ', (tensor hyperviscosity)'
<            write(iulog, '(a,e11.4)') 'dyn_readnl: se_max_hypervis_courant = ',se_max_hypervis_courant
<          end if
<          if (hypervis_scaling /= 0) then
<            write(iulog, '(a)') 'Using tensor viscosity (Guba et al., 2014)'
<            write(iulog, '(a,e11.4)') 'dyn_readnl: se_hypervis_scaling = ',se_hypervis_scaling
---
>          if (abs(se_hypervis_power) < 1.0e-12_r8) then
>             write(iulog, '(a,e11.4)') 'dyn_readnl: se_hypervis_power = ',se_hypervis_power, ', (tensor hyperviscosity)'
>             write(iulog, '(a,e11.4)') 'dyn_readnl: se_hypervis_scaling = ',se_hypervis_scaling
>          else if (abs(se_hypervis_power - 3.322_r8) < 1.0e-12_r8) then
>             write(iulog, '(a,e11.4)') 'dyn_readnl: se_hypervis_power = ',se_hypervis_power, ', (scalar hyperviscosity)'
>             write(iulog, '(a,i0)') 'dyn_readnl: se_fine_ne = ',se_fine_ne
>          else
>             write(iulog, '(a,i0)') 'dyn_readnl: se_hypervis_power = ',se_hypervis_power
>             write(iulog, '(a,e11.4)') 'dyn_readnl: se_hypervis_scaling = ',se_hypervis_scaling
>             write(iulog, '(a,e11.4)') 'dyn_readnl: se_fine_ne = ',se_fine_ne
457a488
>          write(iulog, '(a,e11.4)') 'dyn_readnl: se_max_hypervis_courant = ',se_max_hypervis_courant
719c750
< 
---
>      
862d892
<    real (kind=r8)                          :: omega_cn(2,nelemd) !min and max of vertical Courant number    
962c992
<                              tstep, TimeLevel, hvcoord, n, omega_cn)
---
>                              tstep, TimeLevel, hvcoord, n)
Only in ../trunk2/components: cice
Only in ../trunk2/components: cism
Only in ../trunk2/components: clm
Only in ../trunk2/components: mosart
Only in ../trunk2/components: rtm
Only in ../trunk2/components: ww3
Only in ../opt-se-cslam/: .git
Only in ../trunk2/manage_externals/manic: checkout.pyc
Only in ../trunk2/manage_externals/manic: externals_description.pyc
Only in ../trunk2/manage_externals/manic: externals_status.pyc
Only in ../trunk2/manage_externals/manic: global_constants.pyc
Only in ../trunk2/manage_externals/manic: __init__.pyc
Only in ../trunk2/manage_externals/manic: repository_factory.pyc
Only in ../trunk2/manage_externals/manic: repository_git.pyc
Only in ../trunk2/manage_externals/manic: repository.pyc
Only in ../trunk2/manage_externals/manic: repository_svn.pyc
Only in ../trunk2/manage_externals/manic: sourcetree.pyc
Only in ../trunk2/manage_externals/manic: utils.pyc
Only in ../trunk2/manage_externals/.svn: tmp
Only in ../opt-se-cslam/: notes
Only in ../opt-se-cslam/: README.md
Only in ../opt-se-cslam/: scripts
Only in ../trunk2/: .svn
Only in ../opt-se-cslam/: timings
